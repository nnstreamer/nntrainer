# Network Section : Alexnet(Fused) - Cifar100
#_______________________________________________________
# Layer (type)                     Output Shape         
#=======================================================
# conv2d (Conv2D)                  (None, 16, 16, 64)            
# max_pooling2d (MaxPooling2D)     (None, 8, 8, 64)                 
# conv2d_1 (Conv2D)                (None, 8, 8, 192)           
# max_pooling2d_1 (MaxPooling2D)   (None, 4, 4, 192)              
# conv2d_2 (Conv2D)                (None, 4, 4, 384)           
# conv2d_3 (Conv2D)                (None, 4, 4, 256)            
# conv2d_4 (Conv2D)                (None, 4, 4, 256)           
# max_pooling2d_2 (MaxPooling2D)   (None, 2, 2, 256)           
# flatten (Flatten)                (None, 1024)                 
# dropout (Dropout)                (None, 1024)               
# dense (Dense)                    (None, 4096)                
# activation (Activation)          (None, 4096)              
# dropout_1 (Dropout)              (None, 4096)               
# dense_1 (Dense)                  (None, 4096)               
# activation_1 (Activation)        (None, 4096)                    
# dense_2 (Dense)                  (None, 100)               

[Model]
Type = NeuralNetwork               # Network Type : Regression, KNN, NeuralNetwork
Epochs = 1                         # Epochs
Loss = cross                       # Loss function : cross ( for cross entropy )
#Save_Path = "model.bin"           # model path to save / read
batch_size = 128                     # batch size

[Optimizer]
Type = sgd                         # Optimizer : sgd (stochastic gradien decent),
Learning_rate = 1e-4               # Learning Rate

# Layer Section : Name
[inputlayer]
Type = input
Input_Shape = 3:32:32

# Layer Section : Name
[conv2d_c1_layer]
Type = conv2d
input_layers = inputlayer
kernel_size = 3,3
bias_initializer=zeros
Activation=relu
weight_initializer = xavier_uniform
filters = 64
stride = 2,2
padding = "same"

[pooling2d_p1_layer]
Type=pooling2d
input_layers = conv2d_c1_layer
pool_size = 2,2
stride =2,2
pooling = max

[conv2d_c2_layer]
Type = conv2d
input_layers = pooling2d_p1_layer
kernel_size = 3,3
Activation=relu
bias_initializer=zeros
weight_initializer = xavier_uniform
filters = 192
padding = "same"


[pooling2d_p2_layer]
Type=pooling2d
input_layers = conv2d_c2_layer
pool_size = 2,2
stride =2,2
pooling = max

[conv2d_c3_layer]
Type = conv2d
input_layers = pooling2d_p2_layer
kernel_size = 3,3
bias_initializer=zeros
Activation=relu
weight_initializer = xavier_uniform
filters = 384
padding = "same"


[conv2d_c4_layer]
Type = conv2d
input_layers = conv2d_c3_layer
kernel_size = 3,3
bias_initializer=zeros
Activation=relu
weight_initializer = xavier_uniform
filters = 256
padding = "same"


[conv2d_c5_layer]
Type = conv2d
input_layers = conv2d_c4_layer
kernel_size = 3,3
bias_initializer=zeros
Activation=relu
weight_initializer = xavier_uniform
filters = 256
padding = "same"


[pooling2d_p5_layer]
Type=pooling2d
input_layers = conv2d_c5_layer
pool_size = 2,2
stride =2,2
pooling = max

#Flatten
[flatten]
Type=flatten
input_layers = pooling2d_p5_layer

[dropout_1]
Type=dropout
input_layers = flatten
dropout_rate = 0.5

[fc_f1_layer]
Type = fully_connected
input_layers = dropout_1
Unit = 4096
weight_initializer = xavier_uniform
bias_initializer = zeros
Activation = Relu                       # activation

[dropout_2]
Type=dropout
input_layers = fc_f1_layer
dropout_rate = 0.5

[fc_f2_layer]
Type = fully_connected
input_layers = dropout_2
Unit = 4096
weight_initializer = xavier_uniform
bias_initializer = zeros
Activation = relu                       # activation

[fc_f3_layer]
Type = fully_connected
input_layers = fc_f2_layer
Unit = 100                              # Output Layer Dimension ( = Weight Width )
weight_initializer = xavier_uniform
bias_initializer = zeros
Activation = softmax                    # activation

