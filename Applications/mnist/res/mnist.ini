# Network Section : Network
[Network]
Type = NeuralNetwork	# Network Type : Regression, KNN, NeuralNetwork
Learning_rate = 0.001 	# Learning Rate
Decay_rate = 0.96	# for the decay_rate for the decayed learning rate
Decay_steps = 1000       # decay step for the exponential decayed learning rate
Epoch = 1000		# Epoch
Optimizer = adam 	# Optimizer : sgd (stochastic gradien decent),
 	    		#             adam (Adamtive Moment Estimation)
Cost = cross  		# Cost(loss) function : msr (mean square root error)
                        #                       cross ( for cross entropy )
Model = "model.bin"  	# model path to save / read
minibatch = 32		# mini batch size
beta1 = 0.9 		# beta 1 for adam
beta2 = 0.9999	# beta 2 for adam
epsilon = 1e-7	# epsilon for adam

# Layer Section : Name
[inputlayer]
Type = input
Input_Shape = 32:1:28:28
normalization =true

# Layer Section : Name
[conv2d_c1_layer]
Type = conv2d
kernel_size = 5,5
bias_zero=true
Activation=sigmoid
weight_decay=l2norm
weight_decay_lambda = 0.005
wieght_ini = xavier_uniform
filter = 6
stride = 1,1
padding = 0,0

[pooling2d_p1]
Type=pooling2d
pooling_size = 2,2
stride =2,2
padding = 0,0
pooling = average

[conv2d_c2_layer]
Type = conv2d
kernel_size = 5,5
bias_zero=true
Activation=sigmoid
weight_decay=l2norm
weight_decay_lambda = 0.005
wieght_ini = xavier_uniform
filter = 12
stride = 1,1
padding = 0,0

[pooling2d_p2]
Type=pooling2d
pooling_size = 2,2
stride =2,2
padding = 0,0
pooling = average

[flatten]
Type=flatten

[outputlayer]
Type = fully_connected
Unit = 10		# Output Layer Dimension ( = Weight Width )
Bias_zero = true
Activation = softmax 	# activation : sigmoid, softmax
Weight_Decay = l2norm
weight_Decay_Lambda = 0.005
