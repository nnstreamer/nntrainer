name: "Build Test - Yocto devtool"

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build with Yocto / meta-neural-network on Ubuntu
    runs-on: ubuntu-22.04
    steps:
      - name: build
        if: steps.rebuild.outputs.rebuild == '1'
        id: yocto-build
        run: |
          echo "::group::apt-get install"
          sudo apt-get update
          sudo apt install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 python3-subunit zstd liblz4-tool file locales libacl1
          pip install websockets
          sudo locale-gen en_US.UTF-8
          echo "::endgroup::"
          
          echo "::group::Prepare poky and meta-neural-network"
          git clone git://git.yoctoproject.org/poky -b yocto-5.0.3 && cd poky
          git clone https://github.com/nnstreamer/meta-neural-network -b scarthgap
          echo 'SRC_URI = "git://${{ github.workspace }}/;protocol=file;usehead=1;nobranch=1"' >> meta-neural-network/recipes-nnstreamer/nnstreamer/nnstreamer_%.bbappend
          source oe-init-build-env
          bitbake-layers add-layer ../meta-neural-network
          echo "::endgroup::"
          
          echo "::group::Set local.conf"
          echo 'DL_DIR = "/var/cache/yocto/downloads"' >> conf/local.conf
          echo 'BB_GENERATE_MIRROR_TARBALLS = "1"' >> conf/local.conf
          echo 'SSTATE_DIR = "/var/cache/yocto/sstate-cache"' >> conf/local.conf
          echo 'BB_SIGNATURE_HANDLER = "OEEquivHash"' >> conf/local.conf
          echo 'BB_HASHSERVE = "auto"' >> conf/local.conf
          echo 'BB_HASHSERVE_UPSTREAM = "wss://hashserv.yoctoproject.org/ws"' >> conf/local.conf
          echo 'SSTATE_MIRRORS ?= "file://.* http://cdn.jsdelivr.net/yocto/sstate/all/PATH;downloadfilename=PATH"' >> conf/local.conf
          echo 'PERSISTENT_DIR="/var/cache/yocto/persistent"' >> conf/local.conf
          echo "::endgroup::"
          
          echo "::group::Do setscene-only task and disregard its error"
          bitbake --setscene-only nnstreamer || true
          echo "::endgroup::"
          
          echo "::group::Build nnstreamer"
          bitbake --skip-setscene nnstreamer
          echo "::endgroup::"
          
          echo "::group::Cat build log"
          cat tmp/work/core2-64-poky-linux/nnstreamer/*/temp/log.do_configure || true
          cat tmp/work/core2-64-poky-linux/nnstreamer/*/temp/log.do_compile || true
          echo "::endgroup::"
          
          echo "::group::Copy result"
          mkdir -p ~/daily_build/logs
          cp tmp/work/core2-64-poky-linux/nnstreamer/*/temp/log.do_configure ~/daily_build/logs/yocto_configure_log.txt
          cp tmp/work/core2-64-poky-linux/nnstreamer/*/temp/log.do_compile ~/daily_build/logs/yocto_compile_log.txt
          cp -r tmp/deploy ~/daily_build/deploy
          echo "::endgroup::"
          
          sudo rm -rf tmp/
