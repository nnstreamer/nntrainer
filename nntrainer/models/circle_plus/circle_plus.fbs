namespace circle_plus;

file_extension "op";

enum TensorType : byte {
     FLOAT32 = 0,
     FLOAT16 = 1,
}

enum InitializerType: byte{
     ZEORS = 0,
     ONES = 1,
     LECUN_NORMAL = 2,
     LECUN_UNIFORM = 3,
     XAVIER_NORMAL = 4,
     XAVIER_UNIFORM = 5,
     HE_NORMAL = 6,
     HE_UNIFORM = 7,
     NONE=8,
}

enum ActivationType: byte{
     TANH=0,
     SIGMOID=1,
     SOFTMAX=2,
     RELU=3,
     LEAKY_RELU=4,
     NONE=5,
}

//Tensor
table Tensor{
      type:TensorType;
      dim:[int];
      name:string;
      buffer:uint;
}

//Tensor Mapping : name - index
table TensorMap{
      name:string;
      index:uint;
}


//Buffer
table Buffer{
      data:[ubyte];
}


//Layers
enum LayerTypes : int32 {
     FULLY_CONNECTED = 0,
}

union LayerOptions {
      FullyConnectedOptions,
}

table FullyConnectedOptions {
     unit:uint;
     weight_initializer:InitializerType;
     bias_initializer:InitializerType;
}

table Layers {
      type:LayerTypes;
      name:string;
      options:LayerOptions;
      input_layers:[string];
      input_shape:[int];
      activation:ActivationType;
      weignts:[Tensor];
      input_tensors:[Tensor];
      output_tensors:[Tensor];
}


//Learning Rate
enum LRSchedulerType: int32{
     CONSTANT = 0,
     EXPONENTIAL = 1,
     STEP=2,
}

union LROptions{
      ConstantLROptions,
      ExponentialLROptions,
      StepLROptions,
}

table ConstantLROptions{
      learning_rate:float;
}

table ExponentialLROptions{
      learning_rate:float;
}

table StepLROptions{
      learning_rate:float;
}

table LRScheduler{
      type:LRSchedulerType;
      options:LROptions;
}

//Optimizer 
enum OptimizerType: int32{
     SGD = 0,
     ADAM =1,
}

union OptimizerOptions{
      SGDOptimizerOptions,
      AdamOptimizerOptions,
}

table SGDOptimizerOptions{
      
}

table AdamOptimizerOptions{
      beta1:float;
      beta2:float;
      epsilon:float;
}

table Optimizer{
      type:OptimizerType;
      options:OptimizerOptions;
}

enum LossType:int32{
     MSE =0,
     CROSS = 1,
}

union LossOptions{
      MSELossOptions,
      CrossLossOptions,
}

table MSELossOptions{
}

table CrossLossOptions{
}

table Loss{
      type:LossType;
      options:LossOptions;
}

table NetworkGraph{
      name:string;
      input_tensors:[int];
      output_tensors:[int];
      layers:[Layers];
}


table Model {
      name:string;
      epochs:uint;
      batch_size:uint;
      optimizer:Optimizer;
      learning_rate_scheduler:LRScheduler;
      loss:Loss;      
      network_graph:[NetworkGraph];
}

root_type Model;