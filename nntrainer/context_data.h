#ifndef __CONTEXT_DATA_H__
#define __CONTEXT_DATA_H__

#include <memory>

#include <device_info.h>
#include <mem_allocator.h>

namespace nntrainer
{

/**
 * @class ContextData contains Data which generated by Context to use in Layers
 * created by Context
 * @brief Container to hold context data generated by Context. Eventaully
 * RunLayerContext in layer_node will hold the ContextData, so that, Layer can
 * access this Context Data.
 */
class ContextData : std::enable_shared_from_this<ContextData> {
public:
  explicit ContextData();
  explicit ContextData(std::vector<std::string> accelerators);

  virtual ~ContextData();

  // Move ownership of allocators to DeviceContext;
  std::shared_ptr<MemAllocator> getMemAllocator() { return mem_allocator; }

  auto getHostInfo() const -> const HostDeviceInfo &;
  //const auto getHostContext() const -> const HostDeviceContext&;

  void setMemAllocator(std::shared_ptr<MemAllocator> m) { mem_allocator = m; }

  // TODO(prak) DO we want make layer up responsible for for providing/creating HostDeviceInfo/Context??
  static auto createSingleDevice() -> std::shared_ptr<ContextData>;

  static auto createMultiDevice(const std::vector<std::string> accelerators) -> std::shared_ptr<ContextData>
  {
     return nullptr; // TODO(prak): unimplemented
  }

private:
  std::unique_ptr<HostDeviceInfo> host_device_info = nullptr; // Kept separate
  //std::unique_ptr<HostDeviceContext> host_context;
  std::shared_ptr<MemAllocator> mem_allocator = nullptr; // TODO(): move to HostDeviceContext
  std::vector<std::unique_ptr<DeviceInfo>> accelerator_devices;
  //std::vector<std::unique_ptr<DeviceContext>> device_contexts;

  DeviceInfoList dev_info_list;
  //DeviceContextList device_context_list;
};

}

#endif // __CONTEXT_DATA_H__

